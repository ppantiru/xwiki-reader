<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>XWiki</web>
  <name>CustomMappedLiveTableResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1270832757000</creationDate>
  <date>1341617355000</date>
  <contentUpdateDate>1341617355000</contentUpdateDate>
  <version>1.1</version>
  <title>Macros for livetable results for custom-mapped classes</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <name>XWiki.CustomMappedLiveTableResultsMacros</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>4ce70f6c-b02b-4e82-85d2-346773faa4d2</guid>
    <property>
      <level>programming</level>
    </property>
  </object>
  <content>{{velocity output="false"}}#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(cm_gridresult $className $collist)
  #cm_gridresultwithfilter($className $collist '' '')
#end



#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(cm_gridresultwithfilter $className $collist $filterfrom $filterwhere)
  #if("$!{request.xpage}" == 'plain')
    $response.setContentType('application/json')
  #end
  #set($offset = $mathtool.toInteger($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if($offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $mathtool.toInteger($request.limit))
  #set($tablelist = $util.arrayList)

  ##
  ## Compute the query to use for retrieving data
  ##
  #set($whereSql = '')
  #set($fromSql = '')
  #set($class = $xwiki.getDocument($className).getxWikiClass())

  ## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
  ##
  #if($blacklistedSpaces.size() &gt; 0)
    #set($whereSql = "${whereSql} and doc.space not in (")
    #foreach ($blacklistedSpace in $blacklistedSpaces)
      #if($velocityCount &gt; 1)#set ($whereSql = "${whereSql},")#end
      #set ($whereSql = "${whereSql}'$blacklistedSpace'")
    #end
    #set($whereSql = "${whereSql})")
  #end

  ## Add the columns needed for the actual data
  ##
  #foreach($colname in $collist)
    #cm_livetable_addColumnToQuery($colname, "customMapped")
  #end

  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #set($tag = $util.decodeURI($tag))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      #set($whereSql = "${whereSql} '$tag' in elements(tagprop.list)")
    #end
    #set($whereSql = "${whereSql})")
  #end

  ##
  ## Order
  ##
  #set($order = "$!request.sort")
  #if($order != '')
    #set($orderDirection = "$!request.dir")
    #if($order == 'description')
      #set($tableAlias = 'dtable')
    #else
      #set($tableAlias = $order)
    #end
    #if($order.startsWith('doc.'))
      #set($orderSql = " order by ${tableAlias.replace('_','.')} ${orderDirection}")
    #elseif($tablelist.contains($tableAlias))
      #set($orderSql = " order by ${tableAlias}.value ${orderDirection}")
    #elseif($order == 'averagevote')
      #cm_livetable_getTableName($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${tableAlias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${tableAlias}.id.id and ${tableAlias}.name='${order}'")
      #set($orderSql = " order by ${tableAlias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty('multiSelect').getValue())
      #if("$multiselect" != '1')
        ##cm_livetable_getTableName($order)
        ##set($fromSql = "${fromSql}, ${tableName} ${tableAlias}")
        ##set($whereSql = "${whereSql} and obj.id=${tableAlias}.id.id and ${tableAlias}.name='${order}'")
        #set($orderSql = " order by customMapped.${order} ${orderDirection}")
      #end
    #end
  #end

  ##
  ## Compute the final queries
  ##
  #if("$!className" != '')
    ## Class query
    #set($countSql = ", BaseObject as obj, $className as customMapped $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' and customMapped.id=obj.id $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj, $className as customMapped $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' and customMapped.id=obj.id $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = ", BaseObject as obj, $className as customMapped $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className='${className}' and customMapped.id=obj.id and doc.fullName&lt;&gt;'${className}Template' $!filterwhere")
  #else
    ## Document query
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
  #end

  ## TagCould matching the current filters
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere))
  ## TagCloud matching all the documents used by the livetable
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere))
  #set($sql = "$countSql $!{orderSql}")
  #set($items = $xwiki.searchDocuments($sql, $limit, $offset))
  #set($totalItems = $xwiki.countDocuments($countSql))
  #set($returnedItems = $items.size())


  ## ==============================================
  ## json starts
  ## ==============================================
{
  #if("$!request.sql" == '1')
    "sql": "$escapetool.javascript($sql)",
    "countsql": "$escapetool.javascript($countSql)",
  #end
  "totalrows": $totalItems,
  "matchingtags": {
  #foreach($tag in $tagsMatchingFilters.keySet())
    #if($velocityCount &gt; 1) , #end
    "$escapetool.javascript($tag)": {}
  #end
  },
  "tags" : [
  #foreach($tag in $allMatchingTags.keySet())
    #if($velocityCount &gt; 1) , #end
    {"tag": "$escapetool.javascript($tag)", "count": $allMatchingTags.get($tag)}
  #end
  ],
  "returnedrows": #if($returnedItems &lt; $limit) $returnedItems #else $limit #end,
  "offset": $mathtool.add($offset, 1),
  "reqNo": $request.reqNo,
  "rows": [
    #foreach($item in $items)
     #set($viewable = $xwiki.hasAccessLevel('view', $xcontext.user, "${xcontext.database}:${item}"))
     #if($foreach.count &gt; 1) , #end
     {
      "doc_viewable" : $viewable,
      #if($viewable)
        "doc_fullname" : "$escapetool.javascript(${context.database}):$escapetool.javascript(${item})",
        #set($itemDoc = $xwiki.getDocument($item))
        #set($fullname = "${itemDoc.wiki}:${itemDoc.space}.${itemDoc.name}")
        #set($discard = $itemDoc.use($className))
        #set($itemUrl = $xwiki.getURL($item))
        #set($spaceUrl = $xwiki.getURL("${itemDoc.wiki}:${itemDoc.space}.WebHome"))
        #if($xwiki.isVirtualMode())
          #set($wiki = $itemDoc.wiki)
          #set($wikiUrl = $xwiki.getURL("${itemDoc.wiki}:Main.WebHome"))
        #end
        #set($editUrl = $itemDoc.getURL($itemDoc.defaultEditMode))
        #set($copyUrl = $xwiki.getURL('XWiki.CopyDocument', 'view', "sourcedoc=${util.encodeURI($fullname)}"))
        #set($deleteUrl = $itemDoc.getURL('delete'))
        #set($renameUrl = $itemDoc.getURL('view', 'xpage=rename&amp;step=1'))
        #set($rightsUrl = $itemDoc.getURL('edit', 'editor=rights'))
        "doc_name" : "$escapetool.javascript($itemDoc.name)",
        "doc_fullname" : "$escapetool.javascript($fullname)",
        "doc_space" : "$escapetool.javascript(${itemDoc.space})",
        "doc_url" : "$escapetool.javascript(${itemUrl})",
        "doc_space_url" : "$escapetool.javascript(${spaceUrl})",
        #if($xwiki.isVirtualMode())
          "doc_wiki" : "$escapetool.javascript($wiki)",
          "doc_wiki_url" : "$escapetool.javascript($wikiUrl)",
        #end
        "doc_hasadmin"  : $xwiki.hasAdminRights(),
        "doc_edit_url" : "$escapetool.javascript($editUrl)",
        "doc_copy_url"   : "$escapetool.javascript($copyUrl)",
        "doc_delete_url" : "$escapetool.javascript($deleteUrl)",
        "doc_rename_url" : "$escapetool.javascript($renameUrl)",
        "doc_rights_url" : "$escapetool.javascript($rightsUrl)",
        "doc_author_url" : "$escapetool.javascript($xwiki.getURL($itemDoc.author))",
        "doc_date" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.date)})",
        "doc_title" : "$escapetool.javascript($xwiki.getXMLEncoded(${itemDoc.getDisplayTitle()}))",
        "doc_parent" :  "$escapetool.javascript($itemDoc.parent)",
        "doc_parent_url" : "$escapetool.javascript($xwiki.getURL($itemDoc.parent))",
        #if($itemDoc.parent != '')
        "doc_parent_title" :  "$escapetool.javascript($xwiki.getDocument($itemDoc.parent).displayTitle)",
        #end
        "doc_author" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.author, false)})",
        "doc_creationDate" : "$escapetool.javascript(${xwiki.formatDate($itemDoc.creationDate)})",
        "doc_creationDate_millis" : "$doc.creationDate.time",
        "doc_creator" : "$escapetool.javascript(${xwiki.getLocalUserName($itemDoc.creator, false)})",
        "doc_comments" : {
           #foreach($comment in $itemDoc.getObjects('XWiki.XWikiComments'))
               #set($authorUrl = $xwiki.getURL($comment.get('author'), 'view'))
               #set($authorName = $xwiki.getUserName($comment.get('author')))
               #livetable_getAvatar($xwiki.getDocument($comment.get('author')))
               #if($velocityCount&gt;1) , #end
               "$comment.getProperty('date').value.time" : {
                  "author" : "$escapetool.javascript($comment.get('author'))",
                  "highlight" : "$escapetool.javascript($comment.get('highlight'))",
                  "replyto" : "$escapetool.javascript($comment.get('replyto'))",
                  "comment" : "$escapetool.javascript($comment.getProperty('comment').value)",
                  "number" : "$comment.number",
                  "author_avatar" : "$escapetool.javascript($avatar)",
                  "author_url" : "$escapetool.javascript($authorUrl)",
                  "author_name" : "$escapetool.javascript($authorName)"
                }
           #end
                         },
        "doc_annotations" : { 
           #foreach($comment in $itemDoc.getObjects('AnnotationCode.AnnotationClass'))
               #if($velocityCount&gt;1) , #end
               "$comment.getProperty('date').value.time" : {
                 "annotation" : "$escapetool.javascript($comment.getProperty('annotation').value)",
                  "selection" : "$escapetool.javascript($comment.getProperty('selection').value)",
                  "selectionLeftContext" : "$escapetool.javascript($comment.getProperty('selectionLeftContext').value)", 
                  "selectionRightContext" : "$escapetool.javascript($comment.getProperty('selectionRightContext').value)", 
                  "originalSelection" : "$escapetool.javascript($comment.getProperty('originalSelection').value)", 
                  "author" : "$escapetool.javascript($comment.get('author'))",
                  "state" : "$escapetool.javascript($comment.get('state'))"
                } 
           #end
        }
        #foreach($colname in $collist)
          #if($colname.startsWith('doc.'))
          #elseif($colname == '_action') ,
            #set($text = $msg.get("${request.transprefix}actiontext"))
           "$escapetool.javascript(${colname})" : "$escapetool.javascript(${text})"
          #elseif($colname == '_attachments') ,
            #livetable_getAttachmentsList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${attachlist})"
          #elseif($colname == '_avatar') ,
            #livetable_getAvatar($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${avatar})"
          #elseif($colname == '_images') ,
            #livetable_getImagesList($itemDoc)
            "$escapetool.javascript(${colname})" : "$escapetool.javascript(${imagesList})"
          #else ,
            #set($propClassName = "$!{request.get(${colname.concat('_class')})}")
            #if($propClassName != '')
              #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
              #set($discard = $itemDoc.use($propClassName))
            #else
              #set($propClass = $class)
            #end
            ## Retrieve the property type as it might be usefull
            #set($propType = '')
            #if($listtool.contains($propClass.getPropertyNames(), $colname))
              #set($propType = "$!{propClass.get($colname).type}")
            #end
            #set($fieldValue = "{{{ $!itemDoc.getValue($colname) }}}")
            #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
            #if($fieldDisplayValue == '')
              #set($fieldDisplayValue = $msg.get("${request.transprefix}emptyvalue"))
            #end
            #set($fieldUrl = '')
            ## only retrieve an URL for a DBListClass item
            #if($propType == 'DBListClass')
              #set($fieldUrl = $xwiki.getDocument($fieldValue).getURL())
              #if($fieldUrl == $xwiki.getURL('Main.WebHome'))
                #set($fieldUrl = '')
              #end
            #end
              "$escapetool.javascript(${colname})"  : "$escapetool.javascript($fieldValue)",
#*              "$escapetool.javascript(${colname})" : {{html 'wiki=false' clean='false'}}"$escapetool.javascript($fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'),  '').replaceAll("$regextool.quote('{{/html}}')$", ''))"{{/html}} ,*#
              "$escapetool.javascript(${colname})_value" : "$escapetool.javascript($fieldValue)",
              "$escapetool.javascript(${colname})_url" : "$escapetool.javascript($fieldUrl)"
            #if($propType == 'DateClass')
              , "$escapetool.javascript(${colname})_millis" : "$escapetool.javascript($!itemDoc.getValue($colname).time)"
              , "$escapetool.javascript(${colname})_display" : "$escapetool.javascript($xwiki.formatDate($!itemDoc.getValue($colname)))"
            #end
            ## reset to the default class
            #set($discard = $itemDoc.use($className))
          #end
        #end
      #end
     }
    #end
  ]}
## ==============================================
## json ended
## ==============================================
#end


#**
 * Get the name of the Property that should be used for a given livetable column.
 *#
#macro(cm_livetable_getTableName $colname)
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #set($propType = '')
  #if($listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  #if($propType == 'NumberClass')
    #set($numberType = $propClass.get($colname).getProperty('numberType').getValue())
    #if($numberType == 'integer')
      #set($tableName = 'IntegerProperty')
    #elseif($numberType == 'float')
      #set($tableName = 'FloatProperty')
    #elseif($numberType == 'double')
      #set($tableName = 'DoubleProperty')
    #else
      #set($tableName = 'LongProperty')
    #end
  #elseif($propType == 'BooleanClass')
    #set($tableName = 'IntegerProperty')
  #elseif($propType == 'DateClass')
    #set($tableName = 'DateProperty')
  #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
    #set($tableName = 'LargeStringProperty')
  #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass')
    #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
    #set($relationalStorage = $propClass.get($colname).getProperty('relationalStorage').getValue())
    #if($multiSelect == 1)
      #if($relationalStorage == 1)
        #set($tableName = 'DBStringListProperty')
      #else
        #set($tableName = 'StringListProperty')
      #end
    #else
      #set($tableName = 'StringProperty')
    #end
  #else
    #set($tableName = 'StringProperty')
  #end
#end

#**
 * Old alias of the #livetable_getTableName macro.
 * @deprecated since 2.2.3, use {@link #livetable_getTableName}
 *#
#macro(grid_gettablename $colname)
  #livetable_getTableName($colname)
#end



#**
 * List attachments for a document, putting the result as HTML markup in the $attachlist variable.
 *#
#macro(livetable_getAttachmentsList $itemDoc)
  #set($attachlist = '')
  #foreach($attachment in $itemDoc.attachmentList)
    #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
    #set($attachlist = "${attachlist}&lt;a href='${attachmentUrl}'&gt;$attachment.filename&lt;/a&gt;&lt;br/&gt;")
  #end
#end

#**
 * Old alias of the #livetable_getAttachmentsList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAttachmentsList}
 *#
#macro(grid_attachlist $itemDoc)
  #livetable_getAttachmentsList($itemDoc)
#end



#**
 * List image attachments for a document, putting the result as HTML markup in the $imagesList variable.
 *#
#macro(livetable_getImagesList $itemDoc)
  #set($imagesList = '')
  #foreach ($attachment in $itemDoc.attachmentList)
    #if($attachment.isImage())
      #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
      #set($imagesList = "${imagesList}&lt;img src='${attachmentUrl}' alt='${attachment.filename}' width='50'/&gt;&lt;br/&gt;")
    #end
  #end
#end

#**
 * Old alias of the #livetable_getImagesList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getImagesList}
 *#
#macro(grid_photolist $itemDoc)
  #livetable_getImagesList($itemDoc)
#end


#**
 * Generate the HTML code for a user avatar, with a fixed 50px width.
 *#
#macro(livetable_getAvatar $itemDoc)
  #set($avatar = "#useravatar($itemDoc.fullName)")
  #set($avatar = $avatar.replaceAll('\r|\n', '').replaceAll(' alt=', ' width="40" alt='))
#end

#**
 * Old alias of the #livetable_getAvatar macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAvatar}
 *#
#macro(grid_avatar $itemDoc)
  #livetable_getAvatar($itemDoc)
#end

#**
 * Returns the operator to use in the query when filtering on a column
 *#
#macro(livetable_getOperatorForColumnFilter $colname)
  #if($request.getParameter("operator@${colname}") != '')
    #set($opCode = $request.getParameter("operator@${colname}"))
        #if($opCode == 'eq') #set($operator = '=') ## equals
    #elseif($opCode == 'ne') #set($operator = '!=') ## not equals
    #elseif($opCode == 'gt') #set($operator = '&gt;') ## greater
    #elseif($opCode == 'ge') #set($operator = '&gt;=') ## greater or equal
    #elseif($opCode == 'lt') #set($operator = '&lt;') ## lower
    #elseif($opCode == 'le') #set($operator = '&lt;=') ## lower or equal
    #end
  #else
    #set($operator = '')
  #end
#end

#**
 * Macro to extend the query to select the properties for the livetable columns.
 *#
#macro(cm_livetable_addColumnToQuery $colname $classAlias)
  #set($filterValue = "$!{request.get($colname)}")
  #if($colname == 'description')
    #set($tableAlias = 'dtable')
  #else
    #set($tableAlias = $colname)
  #end
  #set($propType = '')
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #if($propClass &amp;&amp; $listtool.contains($propClass.getPropertyNames(), $colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
  ##
  ## Filter values
  #if("$!filterValue" != '')
    #set($discard = $tablelist.add($tableAlias))
    #set($operator = '')
    #livetable_getOperatorForColumnFilter($colname)
    #if($colname.startsWith('doc.'))
      #set($leftValue = "upper(str(${colname.replace('_','.')}))")
    #else
      #set($leftValue = "${classAlias}.${colname}")
    #end
    #if($operator != '')
      #set($rightValue = "$operator '${filterValue}'")
    #else
      #set($leftValue = "upper($leftValue)")
      #set($rightValue = "like upper('%${filterValue}%')")
    #end
    #if($operator != '!=')
      #set($whereSql = "${whereSql} and $leftValue $rightValue")
    #else
      #set($whereSql = "${whereSql} and ($leftValue $rightValue or $leftValue is null)")
    #end
  #end
#end

#**
 * Old alias of the #livetable_addColumnToQuery macro.
 * @deprecated since 2.2.3, use {@link #livetable_addColumnToQuery}
 *#
#macro(grid_addcolumn $colname)
  #livetable_addColumnToQuery($colname)
#end
{{/velocity}}</content>
</xwikidoc>
