<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>ReaderCode</web>
  <name>Reader</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent/>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1270831810000</creationDate>
  <date>1295226495000</date>
  <contentUpdateDate>1295226495000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <attachment>
    <filename>filter.png</filename>
    <filesize>139</filesize>
    <author>XWiki.Admin</author>
    <date>1294991138000</date>
    <version>1.4</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAUklEQVR42u3QsRYAEAiFYT159eQY
OCcUwuguTf83BOFy8AQgougNcwMNgIjbMTO3gAeR8fCDFdLH6hMtRItVQEOs2AQkMos/sAAqUu4Z
sLNrIAE53U4Rbsy6LQAAAABJRU5ErkJggg==
</content>
  </attachment>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>ReaderCode.Reader</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e2f84061-5f1a-4a29-be4b-9128d4f52c2c</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) { 

    // Sub-module creation, if needed
    var reader = XWiki.reader = XWiki.reader || {}; 
 
    /**
     * The feed reader
     */
    reader.Reader = Class.create({
        
      initialize:function(id, options){

        this.id = id;
        this.options = options || {};

        // Retrieve the possible flag in the filter area
        this.flagSet = {};
        var flags = $('mainContentArea').select("#flagfilter .filterValue img");
        for (var i=0;i&lt;flags.length;i++) {
          this.flagSet[flags[i].up('span').down('.hidden').innerHTML] = {
             "icon" : flags[i].src,
             "next" : i+1 &lt; flags.length ? 
                flags[i+1].up('span').down('.hidden').innerHTML :
                flags[0].up('span').down('.hidden').innerHTML 
          };
        }

        // Initializes entry set
        this.entries = [],
        // Listen to livetable row injection
        document.observe('xwiki:livetable:newrow', this.addEntry.bindAsEventListener(this));
        document.observe('xwiki:livetable:' + this.id + ':loadingEntries', this.clearEntries.bindAsEventListener(this));
        
        // On entering fullscreen, make sure the reader is scrollable
        document.observe("xwiki:fullscreen:entered", function(){
          $('mainContentArea').down('.fullScreenWrapper').setStyle({
             overflowY:'scroll',
             overflowX:'hidden'
          });
          XWiki.reader.setContentColumnWidth();
        });
        document.observe("xwiki:fullscreen:exited", function(){
          XWiki.reader.setContentColumnWidth();
        });
      },

      clearEntries: function(event) {
        delete this.entries;
        this.entries = [];
      },

      addEntry: function(event) {
        this.entries.push(new XWiki.reader.ReaderEntry(this, event.memo.row, event.memo.data));
      },

      collapseAll: function(){
        this.entries.invoke('collapse');
      }
    
    })

    /**
     * Represents a feed reader entry
     */
    reader.ReaderEntry = Class.create({

      initialize: function(reader, row, data) {
    
        this.reader = reader; // Keeps a reference on the reader
        
        this.row = row;
        this.flagCell = row.down('td.flag');
        this.contentCell = row.down('td.title');
        this.dateCell = row.down('td.date');

        this.read = data.read - 0; // Don't ask me why. Does not work otherwise. 
        this.flag = data.flag == '' ? 0 : data.flag;
        this.data = data;

        this.resourceUri = XWiki.contextPath + "/rest/wikis/" + XWiki.currentWiki
                                 + "/spaces/" + this.data.doc_space + "/pages/" + this.data.doc_name + "/objects/XWiki.FeedEntryClass/0/"

        /* Format a nice date and wrap date in a div */
        try {
          var niceDate = new Date(parseInt(this.data.date_millis));
          var displayDate = niceDate.toLocaleDateString();
          
        }
        catch(error){
          // never fail on this
          var displayDate = this.dateCell.innerHTML;
        }
        this.dateCell.update(new Element('div', {'class':'cellWrapper'}).update(displayDate));

        var flagIcon =  this.reader.flagSet[this.flag - 0] ? this.reader.flagSet[this.flag - 0].icon : '';

        /* Initializes flag status */
        this.flagCell.update(
          new Element('div', {'class':'cellWrapper' }).update(
           new Element('img', { 
               "src" :flagIcon
           })
           .observe("click", this.onFlagClicked.bindAsEventListener(this))
          )
        );

        /* Initializes read status */
        this.row.addClassName(this.read == '1' ? "read" : "unread");

        /* Preapre the title table cell, injecting content */
        this.createContentCell();

        return this;
      },

      onFlagClicked: function(event){
        this.flag = this.reader.flagSet[this.flag - 0].next
        event.element().src = this.reader.flagSet[this.flag - 0].icon;
        var bodyContent = encodeURIComponent("property#flag") + "=" + this.flag;
        var ajx = new Ajax.Request(this.resourceUri + "properties/flag?method=put", {
          method: "put",
          postBody: bodyContent,
          onComplete: function(transport) {/* Ignore for now. FIXME: notify when failure. */}
        });
      },

      collapse: function() {
        this.contentCell.removeClassName('expanded');
        if (this.contentCell.up('tr')) {
          this.contentCell.up('tr').removeClassName('focused');
        }
        this.contentCell.down('div.entry').addClassName('hidden');
      },

      expand: function() {
        this.contentCell.addClassName('expanded');
        this.contentCell.up('tr').addClassName('focused');
        this.contentCell.down('div.entry').removeClassName('hidden');
      },

      itemTitleClicked: function(event) {
        if (this.contentCell.hasClassName('expanded')) {
          this.collapse();
        }
        else {
          this.reader.collapseAll();
          this.expand();
          this.reader.currentlyReadItem = this;
          if (this.read == 0) {
            this.updateReadStatus.bind(this).delay(this.reader.options.readDelay || 2, 1, false);
          }
        }
      },

      updateReadStatus: function(read, force){
        if (this.reader.currentlyReadItem == this || force) {
          this.read = read;
          if (!force) {
            this.row.addClassName('read').removeClassName('unread');
          }
          var bodyContent = encodeURIComponent("property#read") + "=" + this.read;
          var ajx = new Ajax.Request(this.resourceUri + "?method=put", {
            method: "put",
            postBody: bodyContent,
            onComplete: function(transport) {/* Ignore for now. FIXME: notify when failure. */}
          });
        }
      },

      createContentCell : function() {
	// Wrap content in a div
        var entryTitleWidth = ($('mainContentArea').down('table.xwiki-livetable-display').getWidth() - 195 - 200) + 'px';
        // 195 = 10 (width of the flag column) + 17 (padding of flag col) + 140 (width of date column) + 17 (padding of date column) + a magic number
        // 200 = width of the source span
	var newContent = new Element('div', {'class':'title'})
            .insert( new Element("span", {'class':'entrySource'}).update(this.data.doc_parent_title) )
            .insert( new Element("span", {'class':'entryTitle'}).setStyle({width:entryTitleWidth}).update(this.contentCell.innerHTML.stripTags()))
            .observe('click', this.itemTitleClicked.bindAsEventListener(this));
	this.contentCell.update(newContent);
	// Enrich content in an hidden div
        var annotationNb = Object.keys(this.data.doc_annotations).length;
        var commentNb = Object.keys(this.data.doc_comments).length;
        var totalReviews = annotationNb + commentNb;
        var entryDiv = 
          new Element("div", { "class" : "entry hidden"})
          .insert(
            new Element("div", { "class" : "entryTitle"})
            .insert( 
	      new Element("a", {'href':this.data.doc_url}).update(this.data.title)
            )
	  )
	  .insert(
            new Element("div", { "class" : "meta"})
            .insert(new Element("span", {'class':'author'}).update( "By &lt;span class='fn'&gt;" + this.data.author + "&lt;/span&gt;"))
            .insert(new Element("span", {'class':'feed'}).update( " From &lt;a class='source' href='" + this.data.doc_parent_url + "'&gt;"
                                                                 + this.data.doc_parent_title + "&lt;/a&gt;"))
            .insert(this.data.category == '' ? '' :
              new Element("span", {'class':'category'}).update( " In " + this.data.category))
          )
          .insert(
              new Element("div", {'class':'content'}).update(this.data.content)
          )
        this.contentCell.insert(entryDiv);
        this.reviewThread = new XWiki.ReviewThread(this.data.doc_comments, {
	      'space' :this.data.doc_space,
	      'page'  :this.data.doc_name
        });
        this.contentCell.down('div.entry').insert(
	      new Element("div", {'class':'reviews'}).update( this.reviewThread.display() )
	    );
    }
  });

  XWiki.ReviewThread = Class.create({
    initialize: function(data, options) {
      this.wiki = options.wiki || XWiki.currentWiki;
      this.page = options.page || XWiki.currentPage;
      this.space = options.space || XWiki.currentSpace;
      this.resourceBase = XWiki.contextPath + "/rest/wikis/" + this.wiki
                               + "/spaces/" + this.space + "/pages/" + this.page + "/comments/";
      this.threads = {};
      this.elems = data;
      this.rootKey = -1;
      var timestamps = Object.keys(data);
      // 1- Initialize thread map
      for (var i=0;i&lt;timestamps.length;i++) {
        var id = this.elems[timestamps[i]].number;
        this.threads[id] = [];
      }
      this.threads[this.rootKey] = [];
      // 2- Fill map
      for (var i=0;i&lt;timestamps.length;i++) {
        var key = this.elems[timestamps[i]].replyto.blank() ? this.rootKey : this.elems[timestamps[i]].replyto;
        this.threads[key].push(timestamps[i]);
      }
      return this;
    },
    displayCommentAddForm: function(commentAddContainer) {
	  commentAddContainer.insert( new Element('textarea', {'class':'comment','cols':'60','rows':'5'}) )
      commentAddContainer.insert(
         new Element('div').insert(
           new Element('span', {'class':'buttonwrapper'}).insert(
             new Element('input', {'type':'submit','class':'button','value':'Add Comment'})
                   .observe('click', this.addCommentSubmitClicked.bindAsEventListener(this))
           )
         )
      );
	},
    display: function() {
      var toReturn = new Element('div', {'class':'commentArea'});
      if (this.threads[this.rootKey].length &gt; 0) {
        toReturn.insert(this.displayThread(this.rootKey));
      }
      else {
	    toReturn.insert(new Element('ul', {'class':'comments'}));
	  }
      // var commentAddContainer = new Element('li', {'class':'reply add'});
      // this.displayCommentAddForm(commentAddContainer); TODO
      // toReturn.down('ul').insert(commentAddContainer);
      return toReturn;
    },
    displayThread: function(threadId) {
        var thisThread = new Element("ul", {'class' : threadId == this.rootKey ? 'comments' : 'commentsreplies'});
        for (var i=0;i&lt;this.threads[threadId].length;i++) {
          var reply = new Element("li", {'class':'reply'});
          var timestamp = this.threads[threadId][i];
          reply.insert( this.displayReview(timestamp) );
          var reviewId = this.elems[timestamp].number;
          if (this.threads[reviewId].length &gt; 0) {
            reply.insert(new Element("div", {'class': 'commentthread'}).insert( this.displayThread(reviewId) ));
          }
          thisThread.insert(reply);
        }
        return thisThread;
    },
    displayReview: function(timestamp){
      var review = this.elems[timestamp];
      var reviewElement = new Element("div", {'class':'xwikicomment'});
      var reviewHeader = 
        new Element("div", {'class' : 'commentheader'})
            .insert( review.author_avatar );
      var reviewContent =  new Element("div", {'class':'commentcontent'})
            .insert( new Element('span', {'class':'fn'}).update(review.author_name))
            .insert(review.comment)
            .insert(new Element('div', {'class': 'commentdate'}).update(new Date(parseInt(timestamp)).toLocaleDateString()));
      var reviewActions = new Element("div", {'class':'commentreply'})
            .insert( new Element('a', {'class':'commentreply'}).update('reply').observe('click', this.reviewReplyClicked.bindAsEventListener(this)));
      reviewElement.insert(new Element('span', {'class':'number hidden'}).update(review.number)); // Will be useful to handle reply event
      reviewElement.insert(reviewHeader);
      reviewElement.insert(reviewContent);
      // reviewElement.insert(reviewActions); TODO
      reviewElement.insert(new Element("div", {'class': 'clearfloats'}));
      return reviewElement;
    },
    reviewReplyClicked: function(event){
        this.displayCommentAddForm(event.element().up('li'));
    },
    addCommentSubmitClicked: function(event){
      var params = {};
      if (typeof event.element().up('li.reply') != 'undefined') {
         // FIXME: not supported yet by the REST comments API.
         params['replyTo'] = event.element().up('li.reply').down('span.number').innerHTML;
      }
      params['text'] = event.element().up('div.commentadd').down('textarea').value;
      new Ajax.Request(this.resourceBase, {
        method:'post',
        parameters:params,
        onComplete:function(transport){
          console.log(transport.responseText);
        }
      });
    }
    
  });


  /**
   * Method that sets the width of the content column header
   */ 
  XWiki.reader.setContentColumnWidth = function(){
    var availableWidth = $('mainContentArea').getWidth() - 300;

    $('mainContentArea').down('th.entryTitle').setStyle({
     'width' : availableWidth + 'px'
    });
    var entryTitleWidth = ($('mainContentArea').down('table.xwiki-livetable-display').getWidth() - 195 - 200) + 'px';
    $('mainContentArea').select('td.title div.title span.entryTitle').invoke('setStyle', {'width':entryTitleWidth});
  }


  return XWiki;

}(XWiki || {}));

document.observe("dom:loaded", function(){
  XWiki.reader.setContentColumnWidth();
  new XWiki.reader.Reader("reader");
  Event.observe(window, 'resize', XWiki.reader.setContentColumnWidth);
});</code>
    </property>
    <property>
      <name>Reader table code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>ReaderCode.Reader</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d4ec66bf-5922-442c-b34c-0809b03b37ae</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('dom:loaded', function(){

  // If there is a button to create PR and a max article count
  if ($('createPressReview') &amp;&amp; $('maxArticleCount')) {

    // Sets the maximum number of articles :
    var maxAllowed = parseInt($('maxArticleCount').innerHTML);
    var table; 

    // Trick to get a reference to the reader livetable.
    // In the future we need a cleaner way to achieve this.
    document.observe("xwiki:livetable:newrow", function(event) {
      if (typeof table == 'undefined') {
        table = event.memo.table;
      }
    });

    // We observe the reader livetable loading entries, and enable/disable the button according to
    // how much articles the current selection has vs. the max allowed
    document.observe("xwiki:livetable:loadingComplete", function(){
      if (table.totalRows &lt; maxAllowed) {
        // Press review creation is allowed !
        $('createPressReview').enable();
        $('createPressReview').removeClassName('disabled');
        $('createPressReviewDisabledMessage').addClassName('hidden');
      }
      else {
        // Too much article, PR creation is forbidden
        $('createPressReview').disabled = true;
        $('createPressReview').addClassName('disabled'); // Don't know why, the pseudo class selector does not seem enough to add the style
                                                         // So we add an extra class.
        $('createPressReviewDisabledMessage').removeClassName('hidden');
      }
    });

    //
    $('createPressReview').observe('click', function(){
      var createPage = new XWiki.Document('CreatePressReview');
      var qs = window.location.hash.length &gt; 1 ? window.location.hash.substring(2) : '';
      window.open( createPage.getURL('view', qs), '_blank');
    });


  }
})
</code>
    </property>
    <property>
      <name>Press review code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>ReaderCode.Reader</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0e02a37e-0426-4445-aef2-5fda487cd81f</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>## Use the current ColorTheme
#template('colorThemeInit.vm')

## Generate reference to background image
#macro(imgURL $name) url($xwiki.getSkinFile("icons/silk/${name}.gif")) #end

## Generate reference to background image
#macro(attImgURL $name) url($doc.getAttachmentURL("${name}.png")) #end

#mainContentArea table.xwiki-livetable table.xwiki-livetable-display thead.xwiki-livetable-display-header {
  border-bottom:none; /* remove the table header border bottom so the first article one can display */
}

#mainContentArea table.xwiki-livetable-display {
 table-layout:fixed;
}

tbody.xwiki-livetable-display-body tr.focused {
  border:3px solid #4791BC;
}

div.entry {
  margin-bottom: 10px;
}

div.entry div.meta {
  color:grey;
  font-size:0.85em;
  padding-top: 4px;
  padding-bottom: 10px;  
}

div.entry div.links {
  border:1px solid #eeeeee;
  font-size: 0.9em;
  margin-top: 5px;
  padding:5px;
}

div.entry div.entryTitle {
  font-size:1.6em;
  font-weight:bold;
  margin-top:10px;
  overflow: visible;
  white-space: normal;
}

div.title span.entrySource {
  white-space:nowrap;
  width:200px;
  overflow:hidden;
  position:absolute;
}
div.title span.entryTitle {
  position:absolute;
  margin:0 0 0 200px;
  white-space:no-wrap;
  overflow:hidden;
}

div.entry div.content {
  white-space:normal
}

tbody.xwiki-livetable-display-body tr.focused div.entry {
  cursor:auto;	
}

tbody.xwiki-livetable-display-body tr.focused:hover , tbody.xwiki-livetable-display-body tr.rowHover {  /* for IE6 tr:hover fix*/
  background-color: #fff;
}

div.xwikicontent table.xwiki-livetable table.xwiki-livetable-display thead.xwiki-livetable-display-header  {
  border-bottom:1px solid #EFEFEF; /* Make room for entry focus border */
}

.xwiki-livetable-topfilters-container h2 {
  background:#attImgURL('filter') no-repeat;
  color:#4D4D4D;
  font-size:1em;
  padding-left:25px;
}
div.entry:hover {
  background:color:none;
}
div.entry div.reviews ul.comments {
  margin-left:0em;
}

div.entry div.reviews span.fn {
  font-weight:bold;
  margin-right:0.6em;
}

div.entry div.reviews ul.comments div.commentheader {
  float:left;
  border:none;
  padding-right:10px;
}
div.entry div.reviews ul.comments div.commentcontent {
  min-height:25px;
  padding: 0px 10px 0px 10px
}
div.entry div.reviews div.xwikicomment {
  padding:0px;
  padding-top:10px;
  border-top:1px solid lightGrey;	
}

div.entry div.reviews ul.commentsreplies {
  margin-left:1em;
}

ul li.add {
  list-style-type:none;
}

div.entry div.commentArea textarea {
  width:100%;	
}

div.entry .commentreply a {
  background-repeat:no-repeat;
  cursor:pointer;
  padding-bottom:2px;
  padding-left:20px;
}

tbody.xwiki-livetable-display-body td.title {
  cursor:pointer;
  white-space:nowrap;
  overflow:hidden;
}
table tbody.xwiki-livetable-display-body td {
  padding:0px;
}

tbody.xwiki-livetable-display-body td.title div.title {
  padding-top:6px;
  height:24px;
}

tbody.xwiki-livetable-display-body td div.cellWrapper {
  padding-top:5px;
  height:25px;
  text-align:center;
}
tbody.xwiki-livetable-display-body td.expanded {
}

thead.xwiki-livetable-display-header th.date {
  min-width:140px;
  width:140px;
}
tbody.xwiki-livetable-display-body td.flag {
  cursor:pointer;
}
thead.xwiki-livetable-display-header th.flag, thead.xwiki-livetable-display-header th.flag {
  width:30px;
}
thead.xwiki-livetable-display-header th.entryTitle {
  width:100%;
}
tbody.xwiki-livetable-display-body td.flag,
tbody.xwiki-livetable-display-body td.date {
  vertical-align:top;
}

tbody.xwiki-livetable-display-body tr.unread div.title {
  font-weight:bold;
}

tbody.xwiki-livetable-display-body tr.read div.title,
tbody.xwiki-livetable-display-body tr.read div.cellWrapper {
  background-color:#FDFDFD;
  font-weight:normal;
  color:#667;
  background-image: -moz-linear-gradient(top, #FFFFFF, #FAFAFA); /* FF3.5+ */
  background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #FFFFFF),color-stop(1, #FAFAFA)); /* Saf4+, Chrome */
  filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#FFFFFF', EndColorStr='#FAFAFA')"; /* IE6,IE7 */
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#FFFFFF', EndColorStr='#FAFAFA')"; /* IE8 */
}

div.fullScreenWrapper {
  overflow-y:scroll;
}

div.fullScreenWrapper div.bottombuttons {
  bottom:0px;
  position:fixed;
}

div.bottombuttons input[disabled="disabled"],
div.bottombuttons input.disabled {
  cursor:default;
  background-color:lightGrey;
  border:1px solid lightGrey;
  color:grey;
}

#createPressReviewDisabledMessage {
  font-style:italic;
  color:grey;
  font-size:0.9em;
}

div.fullScreenEditLinkContainer {
  font-size:100%;
  text-align:left;
  padding-left:23px;
  background: url($xwiki.getSkinFile('icons/silk/arrow_out.gif')) no-repeat;
  margin-top:0px;
  padding-bottom:1px;
}</code>
    </property>
    <property>
      <name>Reader styles</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>(% class="maximizable" %)
(((
{{velocity}}
#set($ok = $xwiki.jsx.use('ReaderCode.Reader'))
#set($ok = $xwiki.ssx.use('ReaderCode.Reader'))
#set($ok = $xwiki.jsfx.use('uicomponents/widgets/fullScreen.js', true))
#set($ok = $xwiki.ssfx.use('uicomponents/widgets/fullScreen.css', true))
#set($collist = ["flag", "read", "title", "content", "date", "category", "author", "feedname", "feedurl"])
#set($colprops = { "flag" : {"headerClass" : "flag", "sortable" : false}
                  ,"read": {"type" : "hidden" }
                  ,"title" : { "type" : "text" , "size" : 30, "headerClass" : "entryTitle"}
                  ,"date" : { "type" : "date", "link" : "none", "headerClass" : "date" }
                  ,"content" : { "type" : "hidden"}
                  ,"category" : { "type" : "hidden"}
                  ,"author" : {"type" : "hidden"}
                  ,"feedname" : {"type" : "hidden"}
                  ,"feedurl" : {"type" : "hidden"}
                 })
#set($filters = "#includeTopic('ReaderCode.TopFilters')")
#set($options = { "selectedColumn" : "date"
                 ,"defaultOrder" : "desc"
                 ,"translationPrefix" : "reader.stream."
                 ,"rowCount": 30
                 ,"tagCloud" : true
                 ,"resultPage" : "ReaderCode.FeedReaderLiveTableResults"
                 ,"className" : "XWiki.FeedEntryClass"
                 ,"extraParams" : "space=$doc.space"
                 ,"description": "Collaborative Web Watch Articles" 
                 ,"topFilters":  "$filters" })
#livetable("reader" $collist $colprops $options)

{{html clean=false}}
#set($configurationDocument = $xwiki.getDocument("${doc.space}.ReaderConfiguration"))
#set($configuration = $configurationDocument.getObject("ReaderCode.ReaderConfigurationClass"))
#set($maxArticleCount = $configuration.getProperty('prMaxArticleCount').value)
#if($hasEdit)
&lt;div class="bottombuttons"&gt;
 &lt;div class="buttons"&gt;
  &lt;span class="buttonwrapper"&gt;
    &lt;input id="createPressReview" type="button" class="button" value="$msg.get('reader.pr.createPressReviewWithSelection')" disabled="disabled" /&gt;
    &lt;span class="hidden" id="createPressReviewDisabledMessage"&gt;$msg.get('reader.pr.pressReviewDisabledSelectionIsTooLarge', [$maxArticleCount])&lt;span&gt;
    &lt;span class="hidden" id="maxArticleCount"&gt;$maxArticleCount&lt;/span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
#end
{{/html}}
{{/velocity}}
)))</content>
</xwikidoc>
